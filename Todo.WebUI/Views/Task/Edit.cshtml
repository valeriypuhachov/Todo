@*@model Todo.WebUI.Models.EditTaskViewModel*@
@model Todo.Domain.Models.UserTask

@{
    ViewBag.Title = Resource.Edit;
}

<div class="container">
    <div class="panel">
        <div class="panel-heading">
            <h2>@Resource.Edit</h2>
        </div>
        @using (Html.BeginForm("Edit", "Task")) {
            <div class="panel-body">
                @Html.ValidationSummary()
                @Html.HiddenFor(m => m.UserId)
                @Html.HiddenFor(m => m.TaskId)
                @Html.HiddenFor(m => m.Latitude)
                @Html.HiddenFor(m => m.Longitude)
                @Html.HiddenFor(m => m.Place)
                <div class="col-md-8">
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-8 col-md-offset-2">
                                @Html.ValidationMessageFor(m => m.TaskName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            @Html.LabelFor(m => m.TaskName, new { @class = "col-md-3 control-label" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(m => m.TaskName, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-9 col-md-offset-2">
                                @Html.ValidationMessageFor(m => m.TaskDescription, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            @Html.LabelFor(m => m.TaskDescription, new { @class = "col-md-3 control-label" })
                            <div class="col-md-9">
                                @Html.TextAreaFor(m => m.TaskDescription, new { @class = "form-control", rows = 5 })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-9 col-md-offset-2">
                                @Html.ValidationMessageFor(m => m.Time, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            @Html.LabelFor(m => m.Time, new { @class = "col-md-3 control-label" })
                            <div class="col-md-9">
                                @Html.EditorFor(m => m.Time, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(m => m.TaskState, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EnumDropDownListFor(m => m.TaskState, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                </div>
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
            <div class="panel-footer">
                <div class="text-center"><label>@Resources.Resource.TaskLocation</label></div>
                <div class="row">
                    <input id="pac-input" class="controls" type="text"
                           placeholder="Enter a location">
                    <div id="type-selector" class="controls">
                        <input type="radio" name="type" id="changetype-all" checked="checked">
                        <label for="changetype-all">All</label>

                        <input type="radio" name="type" id="changetype-establishment">
                        <label for="changetype-establishment">Establishments</label>

                        <input type="radio" name="type" id="changetype-address">
                        <label for="changetype-address">Addresses</label>

                        <input type="radio" name="type" id="changetype-geocode">
                        <label for="changetype-geocode">Geocodes</label>
                    </div>
                    <div id="map" class="col-md-12"></div>
                </div>
            </div>
        }

    </div>
</div>

@section styles {
    <link href="~/Content/flatpickr.min.css" rel="stylesheet" />
}

@section scripts {
    <script type="text/javascript" src="~/Scripts/flatpickr.js"></script>
    <script type="text/javascript" async defer>
        document.getElementById('Time').setAttribute('data-enable-time', 'true');
        $("#Time").flatpickr();
    </script>

    <script>
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -33.8688, lng: 151.2195 },
                zoom: 13
            });

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            var longitude = document.getElementById('Longitude');
            var latitude = document.getElementById('Latitude');
            var taskPlace = document.getElementById('Place');

            var input = (document.getElementById('pac-input'));
            var types = document.getElementById('type-selector');

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            autocomplete.addListener('place_changed', setData);

            if (latitude.getAttribute('value') != null && longitude.getAttribute('value') != null) {
                var pos = {
                    lat: Number(latitude.getAttribute('value').replace(',', '.')),
                    lng: Number(longitude.getAttribute('value').replace(',', '.'))
                }

                map.setCenter(pos);
            } else {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        map.setCenter(pos);
                    })

                }
            }

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

            function setData() {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }

                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }
                marker.setIcon(({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
                longitude.setAttribute('value', place.geometry.location.lng());
                latitude.setAttribute('value', place.geometry.location.lat());
                taskPlace.setAttribute('value', address);
            }

            function setupClickListener(id, types) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function () {
                    autocomplete.setTypes(types);
                });
            }

            setupClickListener('changetype-all', []);
            setupClickListener('changetype-address', ['address']);
            setupClickListener('changetype-establishment', ['establishment']);
            setupClickListener('changetype-geocode', ['geocode']);
        }


    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCh3ZCNFoAMFuLg8St-zg4fuA5IcivSS9E&signed_in=true&libraries=places&callback=initMap" async defer></script>
}